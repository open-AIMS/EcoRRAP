import Metashape
import math
import csv

# Define CSV file path
csv_file_path = "R:/PRJ-COTS/DataAgisoft.csv"

# Function to count images
def count_images(chunk):
    # Count enabled and aligned images
    aligned_and_enabled_images = len([camera for camera in chunk.cameras if camera.enabled and camera.transform])
    
    # Count just enabled images
    enabled_images = len([camera for camera in chunk.cameras if camera.enabled])
    
    return enabled_images, aligned_and_enabled_images

# Function to calculate reprojection errors
def calc_reprojection(chunk):
    point_cloud = chunk.point_cloud
    points = point_cloud.points
    npoints = len(points)
    projections = chunk.point_cloud.projections
    square_error_sum = 0
    num = 0
    max_error = 0

    point_ids = [-1] * len(point_cloud.tracks)
    point_errors = dict()
    for point_id in range(0, npoints):
        point_ids[points[point_id].track_id] = point_id

    for camera in chunk.cameras:
        if not camera.transform:
            continue
        for proj in projections[camera]:
            track_id = proj.track_id
            point_id = point_ids[track_id]
            if point_id < 0:
                continue
            point = points[point_id]
            if not point.valid:
                continue
            error = camera.error(point.coord, proj.coord).norm() ** 2  # Square the error for RMS calculation
            square_error_sum += error
            num += 1
            if point_id not in point_errors.keys():
                point_errors[point_id] = [error]
            else:
                point_errors[point_id].append(error)
            if error > max_error:
                max_error = error
                
    rms_error_pix = math.sqrt(square_error_sum / num)
    max_error_pix = math.sqrt(max_error)
    
    # Get scale of the chunk
    scale = chunk.transform.scale
    
    # Convert reprojection errors to real-world units
    rms_error = rms_error_pix * scale
    max_error = max_error_pix * scale

    return rms_error, rms_error_pix, max_error, max_error_pix

# Open CSV file for writing
with open(csv_file_path, 'w', newline='') as csv_file:
    # Create CSV writer object
    csv_writer = csv.writer(csv_file)
    
    # Write header
    csv_writer.writerow(["Project Name", "Images Enabled", "Images Aligned", "Point Cloud Points", "Total Point Clouds",
                         "RMS Reprojection Error", "RMS Reprojection Error (pix)", "Max Reprojection Error",
                         "Max Reprojection Error (pix)", "Model Faces", "Model Vertices"])
    
    # Get the current chunk
    chunk = Metashape.app.document.chunk
    
    # Get project name
    project_name = Metashape.app.document.path.split('/')[-1].split('.')[0] if Metashape.app.document.path else "Unknown"
    
    # Count images
    enabled_images, aligned_and_enabled_images = count_images(chunk)
    
    # Get point cloud points count
    point_cloud_points = len(chunk.point_cloud.points)
    
    # Count total point clouds
    total_point_clouds = len(chunk.point_cloud.tracks)
    
    # Get model faces and vertices
    model_faces = len(chunk.model.faces)
    model_vertices = len(chunk.model.vertices)
    
    # Calculate reprojection errors
    rms_error, rms_error_pix, max_error, max_error_pix = calc_reprojection(chunk)
    
    # Write project information to CSV
    csv_writer.writerow([project_name, enabled_images, aligned_and_enabled_images, point_cloud_points, total_point_clouds,
                         f"{rms_error:.6f}", f"{rms_error_pix:.6f}", f"{max_error:.6f}", f"{max_error_pix:.6f}",
                         model_faces, model_vertices])

# Notify user
print("Project information has been saved to", csv_file_path)
